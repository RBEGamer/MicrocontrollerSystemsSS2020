


.AREA	Memory (abs)
STACK	=	$1000		  					 ; Nach RESET $1000, nach SetUp $2000=(End of RAM)+1
SetUp	=	$F800		  	   		 		 ; Suboutine System SetUp
Warte1ms=	SetUp+9
VoltAnz =	SetUp+6
LCD4x20A= 	SetUp+3

PORTA	=	0x0000
PORTB   =   0x0001
DDRA    =   0x0002
BIT0    =   0b00000001
BIT3    =   0b00001000
BIT4    =   0b00010000
SPIF    =   0b10000000
SPICR   =   0x00D8
SPIDR   =   0x00DD
SPISR   =   0x00DB
SPIBR   =   0x00DA


	.ORG	$1000		  				   	   ; Variablen ab 0x1000
	
; RAM
DACVAL: .BLKB 1 		  			   		   ;STORES THE DAC VALUE
SCANBIT: .BLKB 1							   ;STORES THE SCANBIT
DACVAL_WATCH: .BLKB 1						   ;DACVAL TMP WIRD IN JEDEM LOOP GEPEICHER FÜR DEBUGGING
	.ORG    $4000						   	   ; Program Code ab 0x4000
	
; FLASH	



START:	LDS	#STACK		  		  	   	  	   ; Setzen Stackpointer
		JSR	SetUp				 			   ; System SetUp

		
INIT:	JSR SPI_INIT		  		 	  	   ; INIT SPI
		JSR CLEAR_DISP		  	   	  	  	   ; CLEAR DISPLAY
		  

	
	
MAIN:
				JSR APPROX	  			   	   ; START APPROX
	 	  		JSR DISPLAY_DAC 		   	   ; WERT AUF DEM DISPLAY ANZEIGEN
				JMP MAIN


		
CLEAR_DISP: 
			LDX #0xFFFF 			  	  	   ; CLEAR DISPLAY
	   		JSR LCD4x20A		   		  	   ; SHOW DISPLAY	   
	   		RTS
 
DISPLAY_DAC:
			LDAA DACVAL			  			   ; LADE DAC VALUE IN ACCU_A
			LDY #0x0208			  	  	   	   ; CURSOR POSITION ZEILE 2 POS 8
			JSR VoltAnz
			RTS
			
SPI_INIT:	   		   						   ; INIT SPI
		 BSET DDRA, #BIT3					   ; SETZTE PA3 AUF OUTPUT = SPI SPI_CS SIGNAL
		 MOVB #0b01010100, SPICR			   ; SETUP SPI CONTROL
		 MOVB #0, SPIBR	   					   ; SETZTE SPIBR auf 0x00
		 BSET PORTA, #BIT3					   ; SETZTE SPI_CS AUF HIGH
		 RTS			

		 
;--------- IN DER APPROX_LOOP DAS SCANBIT IMMER EINEN WEITER NACH RECHTS SCHIEBEN
;--------- DANN DATEN AUF DEN DAC SCHIEBEN UND ERGEBNIS AUF PB0 PRÜFEN
;--------- WENN PB0 LOW -> DAC_VOLTAGE > REF_VOLTAGE -> NEUE INTERATION -> SO DAC_VAL KLEINER WERDEN LASSEN

APPROX:
	   	 MOVB #0, DACVAL					   ; DACVAL AUF 0 SETZTEN
	   	 MOVB #0b10000000, SCANBIT			   ; SCANBIT ANFANGSPOSITION
APPROX_LOOP:
			LDAA DACVAL	   					   ; LADE DACVAL IN AKKU_A
			ORAA SCANBIT   		  			   ; ODER ACC_A mit dem SCANBIT
			JSR SPI_SEND					   ; SENDE DEN WERT AN DEN DAC
			JSR Warte1ms					   ; WARTE 1ms
			BRCLR PORTB, #BIT0, NEXT_SCAN 	   ; WENN PB0 LOW DAC_VOLTAGE > REF_VOLTAGE -> NÄCHSTE ITERATION
				  		 					   ; SONST SPEICHERE DEN SCAN -> SAVE_SCAN
			
SAVE_SCAN:
		  LDAA DACVAL						   ; LADE DACVAL IN ACCU_A
		  ORAA SCANBIT						   ; ODER MIT DEM AKTUELLEN SCANBIT -> NEUE DACVAL WERT
		  STAA DACVAL						   ; SPEICHERE AKKU_A IN DACVAL
		  
NEXT_SCAN:
		  LSR SCANBIT 	 					   ; SCHIEBE SCAN BIT EINS NACH RECHTS
		  BNE APPROX_LOOP 					   ; SCANBIT IST NICHT NULL -> ZIEL NOCH NICHT ERREICHT -> APPROX_LOOP
		  LDAA DACVAL						   ; LADE DAC_VAL IN ACCU_A
		  JSR SPI_SEND						   ; SENDE DAC_VAL TO DAC
		  JSR Warte1ms						   ; WARTE 1ms
		  RTS		
	  
									   	

		 
SPI_SEND:
		  STAA DACVAL_WATCH					   	 	   ;FÜR DEBUGGING = WERT DER AN DEN DAC GESCHCIKT WIRD							   	; IN AKKU A STEHT_DACVAL
		  LDAB #0 								   	   ; D = 0
		  LSRD 										   ; = SCHIEBE A UM 4 STELLEN NACH RECHTS UM AN DIE PASSENDE POSITION ZU GELANGEN
		  LSRD
		  LSRD
		  LSRD
		  BCLR PORTA, #BIT3  					 	   ; SPI_CS AUF LOW SETZTEN -> ADU AKTIVIEREN
		  STAA SPIDR 								   ; DATEN AUS ACCU_A IN SPI BUFFER SCHREIBEN

SPI_LOOP_SPISR_CLEAR_1:	
		  BRCLR SPISR, #SPIF, SPI_LOOP_SPISR_CLEAR_1   ; WARTEN BIS BEI SPISR DAS SPIF FLAG 0 IST -> SONST WIEDERHOLEN
		  LDAA SPIDR 	 							   ; DATEN AUS AKKU_A IN SPIDR 1. 8bit
		  STAB SPIDR					 			   ; DATEN AUS SPIDR IN AKKU_B 2. 8bit
SPI_LOOP_SPISR_CLEAR_2:
		  BRCLR SPISR, #SPIF, SPI_LOOP_SPISR_CLEAR_2   ; WARTEN BIS BEI SPISR DAS SPIF FLAG 0 IST -> SONST WIEDERHOLEN
		  LDAB SPIDR 	 							   ; DATEN AUS SPIDR LESEN
		  BSET PORTA, #BIT3 						   ; SPI_CS AUF HIGH SETZTEN -> ADU DEAKTIVIEREN
		  RTS	
		  
		  
		  		
; **********************************************************************************

	.ORG	$FFFE
	.DW	START		; RESTART Vektor
